CC := gcc
CFLAGS := -MD -g -O0 -Wall -I./3rdparty/include -I. -D__XVPI__ -pthread -fPIC 
LDFLAGS := -MD -g -O0 -Wall -Wl,--no-as-needed -ldl -lm -pthread -fPIC
PATH := $(PWD)/3rdparty/bin:$(PATH)
WGET := wget -T 30 -t 0 -c


ifeq (Darwin,$(findstring Darwin,$(shell uname)))
	# Apple's and MacPorts gcc and clang don't not understands the default -shared and -rdynamic options.
	# note: The Apple gcc version requires the module loader (here: 'vams') at compile time.
	GCC_SHARED_OPTION := -bundle -bundle_loader vams
	VPI_DEPS += vams
else
	GCC_SHARED_OPTION := -shared -nostartfiles
	LDFLAGS += -rdynamic
endif


all : vams dump-vpi.vpi

check tests : run_test.vams.log run_test.va.log run_test.v.log 
	-@echo "-------------------------- List of Failed Tests: ------------------------------"
	-@grep "failed" $^ 
	-@echo "-------------------------------- Summary --------------------------------------"
	-@echo "--- success:        `grep success $^ | grep -v LEAK | wc -l`"
	-@echo "--- success [LEAK]: `grep success $^ | grep LEAK | wc -l` (only valid when running w/ valgrind)"
	-@echo "--- failed:         `grep failed $^ | wc -l`"
	-@echo "-------------------------------------------------------------------------------"

run_test.vams.log : run_test.sh vams dump-vpi.vpi
	-@find testcases -name "*.vams" -exec ./run_test.sh {} \; | tee $@

run_test.va.log : run_test.sh vams dump-vpi.vpi testcases/models
	-@find testcases/models -name "*.va" -exec ./run_test.sh {} \; | tee $@

run_test.v.log : run_test.sh vams dump-vpi.vpi testcases/testsuite
	-@find testcases/testsuite -name "*.v" -exec ./run_test.sh {} \; | tee $@

# Update version string whenever any of the files is touched.
# Dependency on .git/index for [clean]/[modified] tag in version string.
version.c : $(filter-out version.c,$(wildcard *.l *.g *.c *.h Makefile)) .git/index
	@printf "/* Generated by Makefile. Do not edit. */\n\n" > $@
	@printf "#include \"version.h\"\n\n" >> $@
	@printf "char *Makefile_generated_version_string = \"git " >> $@
	@printf "$(shell git log -1 | head -n 1 | cut -d ' ' -f 2) " >> $@
	@printf "$(shell test -n "`git status -s`" && printf "[modified]" || printf "[clean]" ) " >> $@
	@printf "$(shell date +'%Y-%m-%d %H:%M:%S %Z')\";\n\n" >> $@
	@echo "VERSION: `grep string $@ | cut -f 2 -d '"'`"

vams : main.o vams_parse.o vpp.o xvpi.o xvpi_elaborate.o vpi_user.o version.o ./3rdparty/lib/libdparse.a
	@echo "LINK: $@"
	@$(CC) $(LDFLAGS) -o $@ $^

# Do not remove generated sources automatically in each build.
.SECONDARY : $($(wildcard *.l):.l=.c) $($(wildcard *.g):.g=.c) $($(wildcard *.gperf):.gperf=.h)  $($(wildcard *.gperf):.gperf=.c)

vpp.c : vpp_compiler_directive_lookup.h

vams_parse.c : vams_keyword_lookup.h

vams_keyword_lookup.gperf : Makefile $(wildcard Keywords/*)
	@echo "GENERATE: $@"
	@rm -f $@
	@echo "/* This file is generated by Makefile. Do not edit. */" >> $@
	@echo "%language=C" >> $@
	@echo "%readonly-tables" >> $@
	@echo "%define hash-function-name vams_keyword_hash" >> $@
	@echo "%define lookup-function-name vams_keyword_lookup" >> $@
	@echo "%compare-strncmp" >> $@
	@echo "%struct-type" >> $@
	@echo "struct vams_keyword { const char *name; int languages; }" >> $@
	@echo "%{" >> $@
	@echo "#include <string.h>" >> $@
	@echo "#define IEEE_1364_1995 (1 << 0)" >> $@
	@echo "#define IEEE_1364_2001 (1 << 1)" >> $@
	@echo "#define IEEE_1364_2005 (1 << 2)" >> $@
	@echo "#define IEEE_1800_2005 (1 << 3)" >> $@
	@echo "#define VA_1_0         (1 << 4)" >> $@
	@echo "#define VAMS_1_3       (1 << 6)" >> $@
	@echo "#define VAMS_2_0       (1 << 7)" >> $@
	@echo "#define VAMS_2_1       (1 << 8)" >> $@
	@echo "#define VAMS_2_2       (1 << 9)" >> $@
	@echo "#define VAMS_2_3       (1 << 10)" >> $@
	@echo "#define VAMS_2_4       (1 << 11)" >> $@
	@echo "%}" >> $@
	@echo "%%" >> $@
	@keyword_files=`ls $^ | sort -d`;						\
	for k in `cat $(wildcard Keywords/*) | sed -e 's/[ ]*$$//g' | sort | uniq` ; do \
		languages=""; 								\
		for l in `grep -w -l $$k $$keyword_files | cut -c 10-`; do		\
			if [ -z "$$languages" ] ; then 					\
				languages="$$l" ;					\
			else								\
				languages="$$languages | $$l" ;				\
			fi ; 								\
		done ; 									\
		echo "$$k, $$languages" ; 						\
	done >> $@
	@echo "%%" >> $@

%.h : %.gperf 3rdparty/bin/gperf
	@echo "GENERATE: $@"
	@./3rdparty/bin/gperf $< > $@

%.c : %.l 3rdparty/bin/flex
	@echo "GENERATE: $@"
	@./3rdparty/bin/flex -o$@ $<

%.c : %.g ./3rdparty/bin/make_dparser
	@echo "GENERATE: $@"
	@./3rdparty/bin/make_dparser -v $< -o $@

%.o : %.c ./3rdparty/include/dparse.h
	@echo "COMPILE: $@"
	@$(CC) $(CFLAGS) -c $< -o $@

%.vpi : %.c $(VPI_DEPS)
	@echo "COMPILE: $@"
	@$(CC) $(CFLAGS) $(GCC_SHARED_OPTION) $< -o $@

./3rdparty/bin/gperf :
	( cd ./3rdparty/ && $(MAKE) -f Makefile.gperf )

./3rdparty/bin/flex :
	( cd ./3rdparty/ && $(MAKE) -f Makefile.flex )

./3rdparty/include/dparse.h ./3rdparty/lib/libdparse.a : ./3rdparty/bin/make_dparser
./3rdparty/bin/make_dparser :
	( cd ./3rdparty/ && $(MAKE) -f Makefile.dparser-cvs )

testcases/ivtest :
	-( cd testcases && git clone git://github.com/steveicarus/ivtest.git )

testcases/testsuite :
	mkdir -p testcases
	-( cd testcases && $(WGET) ftp://icarus.com/pub/eda/verilog/tests/latest.tgz )
	-( cd testcases && tar xfz latest.tgz )
	@echo "REMOVE: non-spec-conformant testcases: binary NAND, NOR"
	-@rm -v ./testcases/testsuite/ivltests/binary_nor.v
	-@rm -v ./testcases/testsuite/ivltests/binary_nand.v
	@echo "REMOVE: non-spec-conformant testcases: empty fields in module port list"
	-@rm -v testcases/testsuite/ivltests/contrib8.2.v
	-@rm -v testcases/testsuite/ivltests/port-test2.v
	-@rm -v testcases/testsuite/ivltests/port-test4a.v
	-@rm -v testcases/testsuite/ivltests/port-test4b.v
	@echo "REMOVE: non-spec-conformant testcases: use reserved VAMS keywords as identifier"
	-@rm -v testcases/testsuite/ivltests/sdw_dsbl.v
	-@rm -v testcases/testsuite/ivltests/sdw_release.v
	-@rm -v testcases/testsuite/ivltests/sdw_force.v
	@echo "REMOVE: non-spec-conformant testcases: #()-parameter spec without braces"
	-@rm -v testcases/testsuite/ivltests/z1.v
	-@rm -v testcases/testsuite/ivltests/z2.v
	@echo "REMOVE: non-spec-conformant testcases: full_path_description uses '=>', should '*>'"
	-@rm -v testcases/testsuite/ivltests/specify_01.v

testcases/models :
	mkdir -p testcases
	-( cd testcases && $(WGET) http://www.verilog.org/verilog-ams/htmlpages/public-docs/models.tar.gz )
	-( cd testcases && tar xfz models.tar.gz && cat patch-models-*.diff | patch -p0 )

tar : clean
	( cd .. &&										\
		tar cvfz $(notdir $(PWD))-$(shell date -u +'%Y-%m-%d').tar.gz $(notdir $(PWD))  \
			--exclude-from $(notdir $(PWD))/.gitignore 				\
			--exclude $(notdir $(PWD))/.git )
	@echo "TAR: ../$(notdir $(PWD))-$(shell date -u +'%Y-%m-%d').tar.gz"

distclean : realclean
	@echo "REMOVE: 3rdparty sources and binaries."
	-@rm -rf 3rdparty/bin
	-@rm -rf 3rdparty/include
	-@rm -rf 3rdparty/info
	-@rm -rf 3rdparty/lib
	-@rm -rf 3rdparty/man
	-@rm -rf 3rdparty/share
	-@rm -rf 3rdparty/src

realclean : clean
	@echo "REMOVE: generated sources."
	-@rm -f vpp.c
	-@rm -f vpp_compiler_directive_lookup.h
	-@rm -f vams_keyword_lookup.gperf vams_keyword_lookup.h
	-@rm -f vams_parse.c
	-@rm -f version.c

clean :
	@echo "REMOVE: dependency, object and binary files."
	-@rm -rf *.d *.dSYM *.o vams
	@echo "REMOVE: temporary and log files."
	-@find . -name "*.log" -delete
	-@find . -name "*.valgrind" -delete
	@echo "REMOVE: compiled VPI files."
	-@find . -name "*.vpi" -delete
	@echo "REMOVE: parsetree dump file."
	-@rm -f parsetree

-include $(wildcard *.d) dummy

